import asyncio
import json
import logging
from typing import List, Dict
import aiofiles 
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from tabulate import tabulate
import os
from datetime import datetime


logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class Config:
    BOT_TOKEN = '7792128129:AAE5dIQdUavz4aDPGBCOiyJ9A6sL_FjqkNY'


async def load_json_data(file_path: str) -> List[Dict]:
    try:
        async with aiofiles.open(file_path, mode='r', encoding='utf-8') as file:
            content = await file.read()
            return json.loads(content)
    except FileNotFoundError:
        logger.error(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []
    except json.JSONDecodeError:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ —Ñ–∞–π–ª–µ {file_path}")
        return []


def get_latest_date_data(data: List[Dict]) -> List[Dict]:
    filtered_data = [item for item in data if item['–î–∞—Ç–∞'] != '–î–∞—Ç–∞']
    
    return filtered_data[:6]


def format_gold_data(data: List[Dict]) -> str:

    if not data:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    
    headers = list(data[0].keys())
    table_data = [list(item.values()) for item in data]
    
    table = tabulate(
        table_data, 
        headers=headers, 
        tablefmt='pipe', 
        numalign='right', 
        stralign='left'
    )
    
    return f"```\n{table}\n```"


async def cmd_kyrgyz_gold(message: Message):
    json_file_path = 'data/kyrgyz_gold.json'
    
    all_data = await load_json_data(json_file_path)
    
    if not all_data:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–æ–ª–æ—Ç–µ.")
        return
    
    latest_date_data = get_latest_date_data(all_data)
    
    if not latest_date_data:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return
    
    formatted_data = format_gold_data(latest_date_data)
    
    def escape_markdown_v2(text):
        escape_chars = r'_*[]()~`>#+-=|{}.!'
        return ''.join('\\' + char if char in escape_chars else char for char in text)
    
    escaped_date = escape_markdown_v2(latest_date_data[0]['–î–∞—Ç–∞'])
    
    await message.answer(
        f"üìä –î–∞–Ω–Ω—ã–µ –æ –∑–æ–ª–æ—Ç—ã—Ö —Å–ª–∏—Ç–∫–∞—Ö –Ω–∞ {escaped_date}:\n\n{formatted_data}", 
        parse_mode='MarkdownV2'
    )

async def cmd_nbkr_gold(message: Message):
    json_file_path = 'data/nbkr.json'
    
    all_data = await load_json_data(json_file_path)
    
    if not all_data:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–æ–ª–æ—Ç–µ.")
        return
    
    latest_date_data = get_latest_date_data(all_data)
    
    if not latest_date_data:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return
    
    formatted_data = format_gold_data(latest_date_data)
    
    def escape_markdown_v2(text):
        escape_chars = r'_*[]()~`>#+-=|{}.!'
        return ''.join('\\' + char if char in escape_chars else char for char in text)
    
    escaped_date = escape_markdown_v2(latest_date_data[0]['–î–∞—Ç–∞'])
    
    await message.answer(
        f"üìä –î–∞–Ω–Ω—ã–µ –æ –∑–æ–ª–æ—Ç—ã—Ö —Å–ª–∏—Ç–∫–∞—Ö –Ω–∞ {escaped_date}:\n\n{formatted_data}", 
        parse_mode='MarkdownV2'
    )


async def cmd_predict(message: Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–æ–≥–Ω–æ–∑—É",
                    url="https://prediction-of-valuable-material-paper-treasure-edfnsq6aimbjjkt.streamlit.app/"
                )
            ]
        ]
    )
    await message.answer(
        "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑:",
        reply_markup=keyboard
    )


async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /kyrgyz_gold, /nbkr_gold –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∑–æ–ª–æ—Ç—ã—Ö —Å–ª–∏—Ç–∫–∞—Ö.\n"
        "–î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–æ—Å—Ç—É–ø–Ω—É—é –¥–∞—Ç—É.\n"
        "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /predict –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞."
    )

async def main():
    bot = Bot(token=Config.BOT_TOKEN)
    dp = Dispatcher()

    dp.message.register(cmd_start, Command(commands=['start']))
    dp.message.register(cmd_kyrgyz_gold, Command(commands=['kyrgyz_gold']))
    dp.message.register(cmd_nbkr_gold, Command(commands=['nbkr_gold']))
    dp.message.register(cmd_predict, Command(commands=['predict']))

    logger.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')

    try:
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}')
    finally:
        await bot.session.close()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')

        
        